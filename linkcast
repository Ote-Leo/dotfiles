#!/usr/bin/env python3

import sys
import os
import tomllib
import logging
import pathlib

LOGGER = logging.getLogger()
DEAFULT_CONFIG_PATH = "./meta.toml"


def get_meta_links(path=DEAFULT_CONFIG_PATH):
	with open(path, "rb") as config:
		cfg = tomllib.load(config)
	return cfg


def create_symlinks(cfgs, config_target):
	for name, config in cfgs.items():
		source = config.get("source")
		platform_config = config.get(config_target)
		if platform_config is None:
			LOGGER.warning(str.format("`{}` config does not exist for {}", config_target, name))
			continue

		source = source or platform_config.get("source")
		if not source:
			LOGGER.error(str.format("no source specified for config {}, skipping", name))
			continue

		target = platform_config.get("target_path")
		if not source:
			LOGGER.error(
				str.format(
					"no `target_path` specified for config `[{}.{}]`, skipping",
					name,
					config_target,
				)
			)
			continue

		source = pathlib.Path(os.path.expanduser(os.path.expandvars(source)))
		target = pathlib.Path(os.path.expanduser(os.path.expandvars(target)))
		if target.exists() and target.is_symlink():
			LOGGER.debug(str.format("skipping {} as it already exist", target))
			continue

		src = source.resolve()
		os.symlink(src, target, os.path.isdir(src))
		print(str.format("symlinked {}: {} -> {}", name, src, target))


def main(args=None):
	LOGGER.info("Hello, World!")
	cfgs = get_meta_links()

	platform = sys.platform
	if platform == "win32":
		config_target = "windows"
	elif platform in ("linux", "darwin"):
		config_target = "unix"
	else:
		LOGGER.error(str.format("unknown platform {}", platform))
		return 1

	create_symlinks(cfgs, config_target)

	return 0


if __name__ == "__main__":
	sys.exit(main(sys.argv[1:]))

# vim: set noet sw=0:
